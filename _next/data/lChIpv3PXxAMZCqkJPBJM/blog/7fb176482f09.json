{"pageProps":{"isError":false,"article":{"title":"Streamlining CI/CD process with AWS and Bitbucket Pipelines: A Step-by-Step Guide","pubDate":"2023-09-19 03:57:45","link":"https://wisuja.medium.com/streamlining-ci-cd-process-with-aws-and-bitbucket-pipelines-a-step-by-step-guide-7fb176482f09?source=rss-3e448fdc1a01------2","guid":"https://medium.com/p/7fb176482f09","author":"William SJ","thumbnail":"https://cdn-images-1.medium.com/max/852/1*V4wc5I6gTHCccTHPKTixrg.jpeg","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/852/1*V4wc5I6gTHCccTHPKTixrg.jpeg\"><figcaption>CI/CD Integration Flowchart</figcaption></figure><p>TL;DR: This tutorial is also available in video format. Click <a href=\"https://youtu.be/CU3xm8w5EAA?si=jDdVNADlKj1jZKAY\">here</a> to watch it.</p>\n<p>In today’s fast-paced software world, automation is your best friend. Our guide is your ticket to automating how you deploy your applications and improving your development process.</p>\n<p>By combining the powers of AWS CodeDeploy and Bitbucket Pipelines, we’ll show you how to make continuous integration and deployment a piece of cake.</p>\n<p>This guide will be your trusty companion as we walk you through setting up a strong deployment system. We’ll help you blend AWS and Bitbucket seamlessly to make your development process smoother and more efficient than ever before.</p>\n<p><em>In this tutorial, I’ll be using ASP.NET Core Project to do CI/CD, please adjust accordingly to your needs. You can get the tutorial repository from </em><a href=\"https://github.com/wisuja/ASP.NET-CORE-CI-CD-Tutorial-Project\"><em>here</em></a><em>.</em></p>\n<h3>Part 1: AWS Setup</h3>\n<h4>1.1 Create IAM Group</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the IAM console at <a href=\"https://console.aws.amazon.com/iam/\">https://console.aws.amazon.com/iam/</a>.</li>\n<li>In the navigation pane, click <em>User Groups</em> and then click Create New Group.</li>\n<li>In the Group Name box, type the group's name (<em>bit_CodeDeployRole</em>).</li>\n<li>In the list of policies, select the check box for Policy:<br><em>* AmazonS3FullAccess<br>* AWSCodeDeployFullAccess</em>\n</li>\n<li>Click <em>Create Group</em>.</li>\n</ol>\n<h4>1.2 Create IAM User</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the IAM console at <a href=\"https://console.aws.amazon.com/iam/\">https://console.aws.amazon.com/iam/</a>.</li>\n<li>In the navigation pane, click <em>Users</em> and then click <em>Add User</em>.</li>\n<li>Type the user name (<em>CodeDeployUser</em>) for the new user.</li>\n<li><strong>Don’t tick “Provide user access to the AWS Management Console”.</strong></li>\n<li>On the Set permissions page, select <em>Add user to group</em> for permission options.</li>\n<li>Choose the group that you’ve created in the previous step (<em>bit_CodeDeployRole</em>).</li>\n</ol>\n<h4>1.2.1 Generate Access Keys</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the IAM console at <a href=\"https://console.aws.amazon.com/iam/\">https://console.aws.amazon.com/iam/</a>.</li>\n<li>In the navigation pane, click <em>Users</em>.</li>\n<li>Click on the username that you want to create access keys for.</li>\n<li>Click on the <em>Security Credentials</em> tab.</li>\n<li>Under Access Keys, click <em>Create Access keys</em>\n</li>\n<li>Select the use case, fill in the description, and click <em>Create access key</em>\n</li>\n<li>Click <em>Download .csv file</em> to save your access key.</li>\n</ol>\n<blockquote>You cannot view the access keys after you leave this page.</blockquote>\n<h4>1.3 Configure IAM Role</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the IAM console at <a href=\"https://console.aws.amazon.com/iam/\">https://console.aws.amazon.com/iam/</a>.</li>\n<li>In the navigation pane, click <em>Roles</em> and then click <em>Create Role</em>.</li>\n<li>Choose <em>AWS service</em> for Trusted entity type.</li>\n<li>Choose EC2 for the use case.</li>\n<li>Click Next.</li>\n<li>In the list of policies, select the check box for Policy:<br>* <em>AmazonS3FullAccess<br>* AWSCodeDeployRole<br>* AmazonEC2FullAccess<br>* AmazonSSMFullAccess</em>\n</li>\n<li>Enter role name (<em>AWSCodeDeployRole</em>).</li>\n<li>Click <em>Create Role</em>.</li>\n<li>On the Roles page, click on the role that you just created.</li>\n<li>Click the <em>Trust Relationship</em> tab.</li>\n<li>Click <em>Edit Trust Policy</em>.</li>\n<li>Click <em>Add Principal</em>, choose <em>AWS service</em>, and fill codedeploy.ap-southeast-1.amazonaws.com for ARN (Change region accordingly)</li>\n<li>Click Save.</li>\n</ol>\n<h4>2.1 Create an AWS S3 Bucket</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the Amazon S3 console at <a href=\"https://console.aws.amazon.com/s3/\">https://console.aws.amazon.com/s3/</a>.</li>\n<li>Click <em>Create Bucket</em>.</li>\n<li>Type a unique name for your new bucket in the Bucket name field. Ex: bitbucket-codedeploy-deployment.</li>\n<li>For Region, choose <em>Asia Pacific (Singapore) ap-southeast-1</em> as the region where you want the bucket to reside.</li>\n<li>Choose <em>ACLs Enabled</em>, and <em>Bucket Owner preferred</em> as the Bucket option.</li>\n<li>Click <em>Create Bucket</em>.</li>\n</ol>\n<h4>3.1 Set Up an AWS EC2 Instance</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the Amazon EC2 console at <a href=\"https://console.aws.amazon.com/s3/ec2\">https://console.aws.amazon.com/ec2/</a>.</li>\n<li>Click <em>Launch Instance</em>.</li>\n<li>Fill in the name for EC2 Instance. Ex: CodeDeployDirect</li>\n<li>Choose the required OS Images. I’m using <em>Microsoft Windows Server 2022 Base</em> as I’m trying this.</li>\n<li>Click <em>Create a new key pair</em> if you don’t have any key pair. Remember to save the .pem file, you’ll need to access this instance.</li>\n<li>Under Network Settings, tick <em>Allow RDP Traffic from Anywhere</em>, <em>Allow HTTP Traffic from Anywhere</em>, <em>Allow HTTPS Traffic from Anywhere</em>.</li>\n<li>Under <em>Advanced Options</em>, choose the role that we’ve created for this (AWSCodeDeployRole) for the IAM Instance Profile.</li>\n<li>Click <em>Launch Instance</em>.</li>\n</ol>\n<h4>3.1.1 Connect to Instance</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the Amazon EC2 console at <a href=\"https://console.aws.amazon.com/s3/ec2\">https://console.aws.amazon.com/ec2/</a>.</li>\n<li>In the navigation pane, choose <em>Instances</em>.</li>\n<li>Click on the instance that you just created.</li>\n<li>Click <em>Connect</em>.</li>\n<li>Click the <em>RDP Client</em> tab. Pick <em>Connect using the RDP client</em>.<br>Download the Remote Desktop Client file.</li>\n<li>Click <em>Get Password</em>. You’ll get prompted for the key pair .pem file that we’ve done before.</li>\n<li>Connect to the instance using the RDP Client file.</li>\n</ol>\n<h4>3.1.2 Install IIS</h4>\n<ol>\n<li>Open up Server Manager.</li>\n<li>In the navigation bar, click <em>Add Roles or Features</em>.</li>\n<li>Tick <em>Role-based or feature-based installation</em>.</li>\n<li>For Server selection, just choose the available server.</li>\n<li>In the Server Roles, tick the following features:<br>* Web Server (IIS)<br>* Windows Deployment Services</li>\n<li>In the Features, tick <em>.NET 3.5</em> and <em>.NET 4.8</em>.</li>\n<li>Then just click <em>Next</em>, and let it install.</li>\n<li>If you encounter errors, most probably you’ll need to install <a href=\"https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/hosting-bundle?view=aspnetcore-7.0\">NET<br>Core Hosting Bundle</a> first.</li>\n</ol>\n<h4>3.1.3 Install System Manager Agent</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open this <a href=\"https://console.aws.amazon.com/systems-manager/fleet-manager/dhmc\">https://console.aws.amazon.com/systems-manager/fleet-manager/dhmc</a>.</li>\n<li>\n<em>Enable</em> Default Host Management Configuration.</li>\n<li>Choose the <em>AWSSystemsManagerDefaultEC2InstanceManagementRole</em> role (<em>create it if you don’t have one</em>).</li>\n<li>This will allow our instances to show up in the Fleet Manager as managed nodes. You should be able to see your instance showed up in <a href=\"https://console.aws.amazon.com/systems-manager/fleet-manager\">Fleet Manager</a>.</li>\n<li>Connect to the instance.</li>\n<li>Install SSM Agent. Follow this <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-win.html\">instructions</a>.</li>\n<li>Run these commands on Powershell.</li>\n</ol>\n<pre>[System.Net.ServicePointManager]::SecurityProtocol = 'TLS12'<br>$progressPreference = 'silentlyContinue'<br>Invoke-WebRequest `<br>    https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe `<br>    -OutFile $env:USERPROFILE\\Desktop\\SSMAgent_latest.exe<br><br>Start-Process `<br>    -FilePath $env:USERPROFILE\\Desktop\\SSMAgent_latest.exe `<br>    -ArgumentList \"/S\"<br><br>rm -Force $env:USERPROFILE\\Desktop\\SSMAgent_latest.exe<br><br>Restart-Service AmazonSSMAgent</pre>\n<h4>3.1.4 Install CodeDeploy Agent</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open this <a href=\"https://console.aws.amazon.com/systems-manager/distributor\">https://console.aws.amazon.com/systems-manager/distributor</a>\n</li>\n<li>Choose <em>AWSCodeDeployAgent</em> and click <em>Install one time</em>.</li>\n<li>Use default options, except <em>Target Selection</em>.<br><em>Chooses instances manually</em>, you should be able to choose your instance.</li>\n<li>Click <em>Run</em>.</li>\n<li>Verify that the service is running on the instance by running this command.</li>\n</ol>\n<pre>powershell.exe -Command Get-Service -Name codedeployagent</pre>\n<h4>4.1 Create an AWS CodeDeploy Application</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the CodeDeploy Application console at <a href=\"https://console.aws.amazon.com/codesuite/codedeploy/applications\">https://console.aws.amazon.com/codesuite/codedeploy/applications</a>.</li>\n<li>Click <em>Create Application</em>.</li>\n<li>Fill in the Application Name (e.g.: <em>directcodedeploy</em>) and choose <em>EC2/On-premises</em> as the Compute Platform.</li>\n<li>Under <em>Deployment Groups</em>, click <em>Create Deployment Group</em>.</li>\n<li>Fill necessary fields:<br>* Deployment Group: DG1 (<em>Anything</em>)<br>* Service Role: AWSCodeDeployRole<br>* Deployment Type: In-place<br>* Environment Configuration:<br>- Tick <em>Amazon EC2 instances<br>- </em>Fill in the <em>Name</em> for Key<br>- Choose the instance name in the Value field. Ex: CodeDeployDirect<br>- Should show 1 matching instance.<br>* Deployment Settings: <em>CodeDeployDefault.OneAtATime<br></em>* Load Balancer: <em>Disabled</em>\n</li>\n<li>Click <em>Create Deployment Group</em>.</li>\n</ol>\n<h3>Part 2: Bitbucket Configuration</h3>\n<h4>1. Enable Pipelines</h4>\n<ol>\n<li>Sign in to the Bitbucket and navigate to your repository.</li>\n<li>On the sidebar, navigate to <em>Repository Settings</em>.</li>\n<li>Under the Pipelines section, click <em>Settings</em>.</li>\n<li>Enable Pipelines.</li>\n</ol>\n<h4>2. Create bitbucket-pipelines.yml in the root folder of the project</h4>\n<p>The example below is for the <strong>ASP NET Core 6 Web Application</strong>.<br>Please update accordingly.</p>\n<pre>image: mcr.microsoft.com/dotnet/sdk:6.0<br>pipelines:<br> default:<br>  - step:<br>    name: Build and Test<br>    caches:<br>     - dotnetcore<br>    script:<br>     - dotnet restore<br>     - dotnet build<br>     - dotnet test<br>  - step:<br>    name: Publish and Deploy<br>    deployment: staging<br>    script:<br>     - apt-get update &amp;&amp; apt-get install zip -y<br>     - dotnet publish -c Release -o ./publish<br>     - cp appspec.yml ./publish/appspec.yml<br>     - cp before-iis-install-stop.bat ./publish/before-iis-install-stop.bat<br>     - cp after-iis-install-start.bat ./publish/after-iis-install-start.bat<br>     - cd ./publish<br>     - zip -r WebApp.zip .<br>     - pipe: atlassian/aws-code-deploy:0.2.5<br>      variables:<br>       AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION<br>       AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID<br>       AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY<br>       APPLICATION_NAME: $APPLICATION_NAME<br>       S3_BUCKET: $S3_BUCKET<br>       COMMAND: \"upload\"<br>       ZIP_FILE: \"WebApp.zip\"<br>       VERSION_LABEL: \"web-app-1.0.0\"<br>     - pipe: atlassian/aws-code-deploy:0.2.5<br>      variables:<br>       AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION<br>       AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID<br>       AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY<br>       APPLICATION_NAME: $APPLICATION_NAME<br>       DEPLOYMENT_GROUP: $DEPLOYMENT_GROUP<br>       S3_BUCKET: $S3_BUCKET<br>       COMMAND: \"deploy\"<br>       WAIT: \"true\"<br>       VERSION_LABEL: \"web-app-1.0.0\"<br>       IGNORE_APPLICATION_STOP_FAILURES: \"true\"<br>       FILE_EXISTS_BEHAVIOR: \"OVERWRITE\"<br>       DEBUG: \"true\"<br>    artifacts:<br>     - dist/**</pre>\n<h4>3. Create appspec.yml, before-iis-install-stop.bat, and after-iis-install-start.bat in the root folder of the project</h4>\n<p>appspec.yml is to tell AWS CodeDeploy what to do in the deployment process.<br>before-iis-install-stop.bat will stop IIS before overwriting the files to prevent IIS from still accessing the web files.<br>after-iis-install-start.bat will start IIS after copying the web files.</p>\n<h4>4. Add Repository Variables</h4>\n<ol>\n<li>Sign in to the Bitbucket and navigate to your repository.</li>\n<li>On the sidebar, navigate to <em>Repository Settings</em>.</li>\n<li>Under the Pipelines section, click <em>Repository Variables</em>.</li>\n<li>These are required variables in the bitbucket-pipelines.yml:<br>* AWS_ACCESS_KEY_ID<br>* AWS_SECRET_ACCESS_KEY<br>* AWS_DEFAULT_REGION<br>* S3_BUCKET<br>* APPLICATION_NAME<br>* DEPLOYMENT_GROUP</li>\n</ol>\n<p>By following these detailed steps, you can establish a powerful and automated deployment pipeline, ensuring the smooth delivery of your applications from Bitbucket to AWS services. Say goodbye to manual deployment headaches and embrace the future of streamlined development workflows.</p>\n<p>Happy coding and deploying!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7fb176482f09\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/852/1*V4wc5I6gTHCccTHPKTixrg.jpeg\"><figcaption>CI/CD Integration Flowchart</figcaption></figure><p>TL;DR: This tutorial is also available in video format. Click <a href=\"https://youtu.be/CU3xm8w5EAA?si=jDdVNADlKj1jZKAY\">here</a> to watch it.</p>\n<p>In today’s fast-paced software world, automation is your best friend. Our guide is your ticket to automating how you deploy your applications and improving your development process.</p>\n<p>By combining the powers of AWS CodeDeploy and Bitbucket Pipelines, we’ll show you how to make continuous integration and deployment a piece of cake.</p>\n<p>This guide will be your trusty companion as we walk you through setting up a strong deployment system. We’ll help you blend AWS and Bitbucket seamlessly to make your development process smoother and more efficient than ever before.</p>\n<p><em>In this tutorial, I’ll be using ASP.NET Core Project to do CI/CD, please adjust accordingly to your needs. You can get the tutorial repository from </em><a href=\"https://github.com/wisuja/ASP.NET-CORE-CI-CD-Tutorial-Project\"><em>here</em></a><em>.</em></p>\n<h3>Part 1: AWS Setup</h3>\n<h4>1.1 Create IAM Group</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the IAM console at <a href=\"https://console.aws.amazon.com/iam/\">https://console.aws.amazon.com/iam/</a>.</li>\n<li>In the navigation pane, click <em>User Groups</em> and then click Create New Group.</li>\n<li>In the Group Name box, type the group's name (<em>bit_CodeDeployRole</em>).</li>\n<li>In the list of policies, select the check box for Policy:<br><em>* AmazonS3FullAccess<br>* AWSCodeDeployFullAccess</em>\n</li>\n<li>Click <em>Create Group</em>.</li>\n</ol>\n<h4>1.2 Create IAM User</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the IAM console at <a href=\"https://console.aws.amazon.com/iam/\">https://console.aws.amazon.com/iam/</a>.</li>\n<li>In the navigation pane, click <em>Users</em> and then click <em>Add User</em>.</li>\n<li>Type the user name (<em>CodeDeployUser</em>) for the new user.</li>\n<li><strong>Don’t tick “Provide user access to the AWS Management Console”.</strong></li>\n<li>On the Set permissions page, select <em>Add user to group</em> for permission options.</li>\n<li>Choose the group that you’ve created in the previous step (<em>bit_CodeDeployRole</em>).</li>\n</ol>\n<h4>1.2.1 Generate Access Keys</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the IAM console at <a href=\"https://console.aws.amazon.com/iam/\">https://console.aws.amazon.com/iam/</a>.</li>\n<li>In the navigation pane, click <em>Users</em>.</li>\n<li>Click on the username that you want to create access keys for.</li>\n<li>Click on the <em>Security Credentials</em> tab.</li>\n<li>Under Access Keys, click <em>Create Access keys</em>\n</li>\n<li>Select the use case, fill in the description, and click <em>Create access key</em>\n</li>\n<li>Click <em>Download .csv file</em> to save your access key.</li>\n</ol>\n<blockquote>You cannot view the access keys after you leave this page.</blockquote>\n<h4>1.3 Configure IAM Role</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the IAM console at <a href=\"https://console.aws.amazon.com/iam/\">https://console.aws.amazon.com/iam/</a>.</li>\n<li>In the navigation pane, click <em>Roles</em> and then click <em>Create Role</em>.</li>\n<li>Choose <em>AWS service</em> for Trusted entity type.</li>\n<li>Choose EC2 for the use case.</li>\n<li>Click Next.</li>\n<li>In the list of policies, select the check box for Policy:<br>* <em>AmazonS3FullAccess<br>* AWSCodeDeployRole<br>* AmazonEC2FullAccess<br>* AmazonSSMFullAccess</em>\n</li>\n<li>Enter role name (<em>AWSCodeDeployRole</em>).</li>\n<li>Click <em>Create Role</em>.</li>\n<li>On the Roles page, click on the role that you just created.</li>\n<li>Click the <em>Trust Relationship</em> tab.</li>\n<li>Click <em>Edit Trust Policy</em>.</li>\n<li>Click <em>Add Principal</em>, choose <em>AWS service</em>, and fill codedeploy.ap-southeast-1.amazonaws.com for ARN (Change region accordingly)</li>\n<li>Click Save.</li>\n</ol>\n<h4>2.1 Create an AWS S3 Bucket</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the Amazon S3 console at <a href=\"https://console.aws.amazon.com/s3/\">https://console.aws.amazon.com/s3/</a>.</li>\n<li>Click <em>Create Bucket</em>.</li>\n<li>Type a unique name for your new bucket in the Bucket name field. Ex: bitbucket-codedeploy-deployment.</li>\n<li>For Region, choose <em>Asia Pacific (Singapore) ap-southeast-1</em> as the region where you want the bucket to reside.</li>\n<li>Choose <em>ACLs Enabled</em>, and <em>Bucket Owner preferred</em> as the Bucket option.</li>\n<li>Click <em>Create Bucket</em>.</li>\n</ol>\n<h4>3.1 Set Up an AWS EC2 Instance</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the Amazon EC2 console at <a href=\"https://console.aws.amazon.com/s3/ec2\">https://console.aws.amazon.com/ec2/</a>.</li>\n<li>Click <em>Launch Instance</em>.</li>\n<li>Fill in the name for EC2 Instance. Ex: CodeDeployDirect</li>\n<li>Choose the required OS Images. I’m using <em>Microsoft Windows Server 2022 Base</em> as I’m trying this.</li>\n<li>Click <em>Create a new key pair</em> if you don’t have any key pair. Remember to save the .pem file, you’ll need to access this instance.</li>\n<li>Under Network Settings, tick <em>Allow RDP Traffic from Anywhere</em>, <em>Allow HTTP Traffic from Anywhere</em>, <em>Allow HTTPS Traffic from Anywhere</em>.</li>\n<li>Under <em>Advanced Options</em>, choose the role that we’ve created for this (AWSCodeDeployRole) for the IAM Instance Profile.</li>\n<li>Click <em>Launch Instance</em>.</li>\n</ol>\n<h4>3.1.1 Connect to Instance</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the Amazon EC2 console at <a href=\"https://console.aws.amazon.com/s3/ec2\">https://console.aws.amazon.com/ec2/</a>.</li>\n<li>In the navigation pane, choose <em>Instances</em>.</li>\n<li>Click on the instance that you just created.</li>\n<li>Click <em>Connect</em>.</li>\n<li>Click the <em>RDP Client</em> tab. Pick <em>Connect using the RDP client</em>.<br>Download the Remote Desktop Client file.</li>\n<li>Click <em>Get Password</em>. You’ll get prompted for the key pair .pem file that we’ve done before.</li>\n<li>Connect to the instance using the RDP Client file.</li>\n</ol>\n<h4>3.1.2 Install IIS</h4>\n<ol>\n<li>Open up Server Manager.</li>\n<li>In the navigation bar, click <em>Add Roles or Features</em>.</li>\n<li>Tick <em>Role-based or feature-based installation</em>.</li>\n<li>For Server selection, just choose the available server.</li>\n<li>In the Server Roles, tick the following features:<br>* Web Server (IIS)<br>* Windows Deployment Services</li>\n<li>In the Features, tick <em>.NET 3.5</em> and <em>.NET 4.8</em>.</li>\n<li>Then just click <em>Next</em>, and let it install.</li>\n<li>If you encounter errors, most probably you’ll need to install <a href=\"https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/hosting-bundle?view=aspnetcore-7.0\">NET<br>Core Hosting Bundle</a> first.</li>\n</ol>\n<h4>3.1.3 Install System Manager Agent</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open this <a href=\"https://console.aws.amazon.com/systems-manager/fleet-manager/dhmc\">https://console.aws.amazon.com/systems-manager/fleet-manager/dhmc</a>.</li>\n<li>\n<em>Enable</em> Default Host Management Configuration.</li>\n<li>Choose the <em>AWSSystemsManagerDefaultEC2InstanceManagementRole</em> role (<em>create it if you don’t have one</em>).</li>\n<li>This will allow our instances to show up in the Fleet Manager as managed nodes. You should be able to see your instance showed up in <a href=\"https://console.aws.amazon.com/systems-manager/fleet-manager\">Fleet Manager</a>.</li>\n<li>Connect to the instance.</li>\n<li>Install SSM Agent. Follow this <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-win.html\">instructions</a>.</li>\n<li>Run these commands on Powershell.</li>\n</ol>\n<pre>[System.Net.ServicePointManager]::SecurityProtocol = 'TLS12'<br>$progressPreference = 'silentlyContinue'<br>Invoke-WebRequest `<br>    https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe `<br>    -OutFile $env:USERPROFILE\\Desktop\\SSMAgent_latest.exe<br><br>Start-Process `<br>    -FilePath $env:USERPROFILE\\Desktop\\SSMAgent_latest.exe `<br>    -ArgumentList \"/S\"<br><br>rm -Force $env:USERPROFILE\\Desktop\\SSMAgent_latest.exe<br><br>Restart-Service AmazonSSMAgent</pre>\n<h4>3.1.4 Install CodeDeploy Agent</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open this <a href=\"https://console.aws.amazon.com/systems-manager/distributor\">https://console.aws.amazon.com/systems-manager/distributor</a>\n</li>\n<li>Choose <em>AWSCodeDeployAgent</em> and click <em>Install one time</em>.</li>\n<li>Use default options, except <em>Target Selection</em>.<br><em>Chooses instances manually</em>, you should be able to choose your instance.</li>\n<li>Click <em>Run</em>.</li>\n<li>Verify that the service is running on the instance by running this command.</li>\n</ol>\n<pre>powershell.exe -Command Get-Service -Name codedeployagent</pre>\n<h4>4.1 Create an AWS CodeDeploy Application</h4>\n<ol>\n<li>Sign in to the AWS Management Console and open the CodeDeploy Application console at <a href=\"https://console.aws.amazon.com/codesuite/codedeploy/applications\">https://console.aws.amazon.com/codesuite/codedeploy/applications</a>.</li>\n<li>Click <em>Create Application</em>.</li>\n<li>Fill in the Application Name (e.g.: <em>directcodedeploy</em>) and choose <em>EC2/On-premises</em> as the Compute Platform.</li>\n<li>Under <em>Deployment Groups</em>, click <em>Create Deployment Group</em>.</li>\n<li>Fill necessary fields:<br>* Deployment Group: DG1 (<em>Anything</em>)<br>* Service Role: AWSCodeDeployRole<br>* Deployment Type: In-place<br>* Environment Configuration:<br>- Tick <em>Amazon EC2 instances<br>- </em>Fill in the <em>Name</em> for Key<br>- Choose the instance name in the Value field. Ex: CodeDeployDirect<br>- Should show 1 matching instance.<br>* Deployment Settings: <em>CodeDeployDefault.OneAtATime<br></em>* Load Balancer: <em>Disabled</em>\n</li>\n<li>Click <em>Create Deployment Group</em>.</li>\n</ol>\n<h3>Part 2: Bitbucket Configuration</h3>\n<h4>1. Enable Pipelines</h4>\n<ol>\n<li>Sign in to the Bitbucket and navigate to your repository.</li>\n<li>On the sidebar, navigate to <em>Repository Settings</em>.</li>\n<li>Under the Pipelines section, click <em>Settings</em>.</li>\n<li>Enable Pipelines.</li>\n</ol>\n<h4>2. Create bitbucket-pipelines.yml in the root folder of the project</h4>\n<p>The example below is for the <strong>ASP NET Core 6 Web Application</strong>.<br>Please update accordingly.</p>\n<pre>image: mcr.microsoft.com/dotnet/sdk:6.0<br>pipelines:<br> default:<br>  - step:<br>    name: Build and Test<br>    caches:<br>     - dotnetcore<br>    script:<br>     - dotnet restore<br>     - dotnet build<br>     - dotnet test<br>  - step:<br>    name: Publish and Deploy<br>    deployment: staging<br>    script:<br>     - apt-get update &amp;&amp; apt-get install zip -y<br>     - dotnet publish -c Release -o ./publish<br>     - cp appspec.yml ./publish/appspec.yml<br>     - cp before-iis-install-stop.bat ./publish/before-iis-install-stop.bat<br>     - cp after-iis-install-start.bat ./publish/after-iis-install-start.bat<br>     - cd ./publish<br>     - zip -r WebApp.zip .<br>     - pipe: atlassian/aws-code-deploy:0.2.5<br>      variables:<br>       AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION<br>       AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID<br>       AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY<br>       APPLICATION_NAME: $APPLICATION_NAME<br>       S3_BUCKET: $S3_BUCKET<br>       COMMAND: \"upload\"<br>       ZIP_FILE: \"WebApp.zip\"<br>       VERSION_LABEL: \"web-app-1.0.0\"<br>     - pipe: atlassian/aws-code-deploy:0.2.5<br>      variables:<br>       AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION<br>       AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID<br>       AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY<br>       APPLICATION_NAME: $APPLICATION_NAME<br>       DEPLOYMENT_GROUP: $DEPLOYMENT_GROUP<br>       S3_BUCKET: $S3_BUCKET<br>       COMMAND: \"deploy\"<br>       WAIT: \"true\"<br>       VERSION_LABEL: \"web-app-1.0.0\"<br>       IGNORE_APPLICATION_STOP_FAILURES: \"true\"<br>       FILE_EXISTS_BEHAVIOR: \"OVERWRITE\"<br>       DEBUG: \"true\"<br>    artifacts:<br>     - dist/**</pre>\n<h4>3. Create appspec.yml, before-iis-install-stop.bat, and after-iis-install-start.bat in the root folder of the project</h4>\n<p>appspec.yml is to tell AWS CodeDeploy what to do in the deployment process.<br>before-iis-install-stop.bat will stop IIS before overwriting the files to prevent IIS from still accessing the web files.<br>after-iis-install-start.bat will start IIS after copying the web files.</p>\n<h4>4. Add Repository Variables</h4>\n<ol>\n<li>Sign in to the Bitbucket and navigate to your repository.</li>\n<li>On the sidebar, navigate to <em>Repository Settings</em>.</li>\n<li>Under the Pipelines section, click <em>Repository Variables</em>.</li>\n<li>These are required variables in the bitbucket-pipelines.yml:<br>* AWS_ACCESS_KEY_ID<br>* AWS_SECRET_ACCESS_KEY<br>* AWS_DEFAULT_REGION<br>* S3_BUCKET<br>* APPLICATION_NAME<br>* DEPLOYMENT_GROUP</li>\n</ol>\n<p>By following these detailed steps, you can establish a powerful and automated deployment pipeline, ensuring the smooth delivery of your applications from Bitbucket to AWS services. Say goodbye to manual deployment headaches and embrace the future of streamlined development workflows.</p>\n<p>Happy coding and deploying!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7fb176482f09\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["deployment","cicd","streamlining","bitbucket","aws"]}},"__N_SSG":true}